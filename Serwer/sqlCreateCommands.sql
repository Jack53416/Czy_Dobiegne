--tables creation

CREATE TABLE LOCATIONS (
	ID INTEGER NOT NULL,
	NAME VARCHAR(100),
	COUNTRY VARCHAR(100),
	CITY VARCHAR(100) NOT NULL,
	STREET VARCHAR(100) NOT NULL,
	LONGITUDE DECIMAL(10,7) CHECK (LONGITUDE >= -180 AND LONGITUDE <= 180),
	LATITUDE DECIMAL(10,7) CHECK (LATITUDE >= -90 AND LATITUDE <= 90),
	CONSTRAINT LOCATIONS_PK PRIMARY KEY (ID)
) ;

CREATE TABLE TOILETS (
	ID INTEGER NOT NULL,
	ID_LOCATION INTEGER NOT NULL,
	PRICE_MIN DECIMAL(4,2) NOT NULL,
	PRICE_MAX DECIMAL(4,2) NOT NULL,
	DESCRIPTION VARCHAR(200),
	RATING DECIMAL(2,1),
	VOTE_NR INTEGER,
	DATE_ADDED TIMESTAMP NOT NULL,
	VALIDATED CHAR(1) CHECK (VALIDATED IN ('Y', 'N')),
	CONSTRAINT TOILETS_PK PRIMARY KEY (ID),
	CONSTRAINT TOILETS_LOCATIONS_FK FOREIGN KEY (ID_LOCATION) REFERENCES LOCATIONS(ID) ON DELETE CASCADE ON UPDATE CASCADE
) ;
CREATE INDEX TOILETS_LOCATIONS_FK ON TOILETS (ID_LOCATION) ;


CREATE TABLE USERS (
	ID INTEGER NOT NULL,
	USERNAME VARCHAR(40) NOT NULL,
	EMAIL VARCHAR(60) NOT NULL,
	PASSWORD VARCHAR(100) NOT NULL,
	SALT VARCHAR(100),
	CONSTRAINT USERS_PK PRIMARY KEY (ID)
) ;
CREATE UNIQUE INDEX USERS_EMAIL_UNIQUE ON USERS (EMAIL) ;
CREATE UNIQUE INDEX USERS_USERNAME_UNIQUE ON USERS (USERNAME) ;

--sequences creation

CREATE SEQUENCE ID_GENERIC;

--triggers creation

SET TERM ^ ;

CREATE TRIGGER TOILETS_BEFORE_INSERT FOR TOILETS BEFORE INSERT
AS
BEGIN
	IF (NEW.ID IS NULL) THEN
		NEW.ID = NEXT VALUE FOR ID_GENERIC;
	IF (NEW.DATE_ADDED IS NULL) THEN
		SELECT CURRENT_TIMESTAMP FROM RDB$DATABASE
		INTO NEW.DATE_ADDED;
END ^

CREATE TRIGGER LOCATIONS_BEFORE_INSERT FOR LOCATIONS BEFORE INSERT
AS
BEGIN
	IF(NEW.ID IS NULL) THEN
		NEW.ID = NEXT VALUE FOR ID_GENERIC;
END^

CREATE TRIGGER USERS_BEFORE_INSERT FOR USERS BEFORE INSERT
AS
BEGIN
	IF(NEW.ID IS NULL) THEN
		NEW.ID = NEXT VALUE FOR ID_GENERIC;
END^

SET TERM ; ^


--test inserts

INSERT INTO LOCATIONS(NAME,COUNTRY,CITY,STREET) VALUES('POLITECHNIKA', 'POLSKA', '��d�', 'Stefana �eromskiego 116');
INSERT INTO TOILETS(ID_LOCATION , PRICE_MIN, PRICE_MAX, DESCRIPTION, RATING, VOTE_NR) VALUES(1, 0, 0, 'DARMOWY KIBEL NA KAZDYM WYDZIALE', 5.0, 10);

-- Views creation
CREATE OR ALTER VIEW TOILET_VIEW (PRICE_MIN, PRICE_MAX, DESCRIPTION, RATING, VOTE_NR, DATE_ADDED, NAME, CITY, STREET, LONGITUDE, LATITUDE)
AS
SELECT TOILETS.PRICE_MIN, TOILETS.PRICE_MAX, TOILETS.DESCRIPTION, TOILETS.RATING, TOILETS.VOTE_NR, TOILETS.DATE_ADDED, LOCATIONS.NAME, LOCATIONS.CITY, LOCATIONS.STREET, LOCATIONS.LONGITUDE, LOCATIONS.LATITUDE
FROM TOILETS
JOIN LOCATIONS ON TOILETS.ID_LOCATION = LOCATIONS.ID
WHERE TOILETS.VALIDATED = 'Y';


--Procedures

CREATE OR ALTER PROCEDURE ADD_LOCATION
(loc_name VARCHAR(100), loc_country VARCHAR(100), loc_city VARCHAR(100), loc_street VARCHAR(100), loc_longitude DECIMAL(10,7), loc_latitude DECIMAL(10,7))
RETURNS (new_loc_id INTEGER)
AS
BEGIN
	INSERT INTO LOCATIONS (NAME, COUNTRY, CITY, STREET, LONGITUDE, LATITUDE)
	VALUES(:loc_name, :loc_country, :loc_city, :loc_street, :loc_longitude, :loc_latitude);

	SELECT LOCATIONS.ID FROM LOCATIONS WHERE
	LOCATIONS.LONGITUDE = :loc_longitude AND LOCATIONS.LATITUDE = :loc_latitude AND LOCATIONS.STREET = :loc_street
	INTO :new_loc_id;
END




CREATE OR ALTER PROCEDURE ADD_TOILET
(loc_name VARCHAR(100), loc_country VARCHAR(100), loc_city VARCHAR(100), loc_street VARCHAR(100), loc_longitude DECIMAL(10,7), loc_latitude DECIMAL(10,7),
 toil_priceMin DECIMAL(5,2), toil_priceMax DECIMAL(5,2), toil_description VARCHAR(200))
RETURNS (code INTEGER, message VARCHAR(120))
 AS
 DECLARE loc_id INTEGER;
 BEGIN
	 SELECT LOCATIONS.ID FROM LOCATIONS
	 WHERE LOCATIONS.LATITUDE = :loc_latitude AND LOCATIONS.LONGITUDE = :loc_longitude
	 INTO :loc_id;

	 IF (:loc_id IS NULL) THEN
	 BEGIN
		EXECUTE PROCEDURE ADD_LOCATION(:loc_name, :loc_country, :loc_city, :loc_street, :loc_longitude, :loc_latitude)
		RETURNING_VALUES :loc_id;
	 END

	 INSERT INTO TOILETS (ID_LOCATION, PRICE_MIN, PRICE_MAX, DESCRIPTION, RATING, VOTE_NR, VALIDATED)
	 VALUES (:loc_id, :toil_priceMin, :toil_priceMax, :toil_description, 0, 0, 'N');

	 SELECT 0, 'Success' FROM RDB$DATABASE INTO :code, :message;
 END
